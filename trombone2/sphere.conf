
POST /product-item                 <js>  node/product-item.js

POST /product-collection           <js>  node/product-collection.js

POST /order-collection             <js>  node/order-collection.js

POST /customer-order-collection    <js>  node/customer-order-collection.js

POST /order-item                   <js>  node/order-item.js

# /////////////////////////////////////////////////////////////////////////////
#
#  Move all stock from an order back to a depot.
#
#  {
#    "depotId"   : number,
#    "orderId"   : number,
#  }
#
PATCH  /stock/move/order-to-depot ><

        WITH update AS
          ( UPDATE depot_stock ds 
            SET quantity = ds.quantity + c.quantity 
            FROM ( SELECT product_id
                        , quantity 
                   FROM order_stock 
                   WHERE order_id = {{orderId}}
                 ) c 
            WHERE c.product_id = ds.product_id 
              AND ds.depot_id  = {{depotId}}
          ) DELETE from order_stock 
            WHERE order_id = {{orderId}}

# /////////////////////////////////////////////////////////////////////////////
#
#  Move stock from a depot to an order.
#
#  {
#    "depotId"   : number,
#    "orderId"   : number,
#    "productId" : number,
#    "quantity"  : number
#  }
#
PATCH  /stock/move/depot-to-order  ><

        WITH update AS
          ( UPDATE depot_stock
            SET quantity = quantity - {{quantity}}
            WHERE product_id = {{productId}}
              AND depot_id   = {{depotId}}
              AND quantity  >= {{quantity}}
            RETURNING {{productId}}, {{orderId}} :: integer, {{quantity}}
          ) INSERT INTO order_stock
            ( product_id
            , order_id
            , quantity )
            ( SELECT * FROM update )

# /////////////////////////////////////////////////////////////////////////////
#
#  Log a depot stock transaction.
#
#  {
#    "datetime"   : string,
#    "depotId"    : number,
#    "productId"  : number,
#    "quantity"   : number,
#    "type"       : string
#  }
#
POST   /stock-transaction/depot  ><

        INSERT INTO depot_stock_transaction
            ( product_id, depot_id, quantity, time, transaction_type )
        VALUES ( {{productId}}
               , {{depotId}}
               , {{quantity}}
               , {{datetime}}
               , {{type}} 
               )

# /////////////////////////////////////////////////////////////////////////////
#
#  Log an order stock transaction.
#
#  {
#    "datetime"   : string,
#    "orderId"    : number,
#    "productId"  : number,
#    "quantity"   : number,
#    "type"       : string
#  }
#
POST   /stock-transaction/order  ><

        INSERT INTO order_stock_transaction
            ( product_id, order_id, quantity, time, transaction_type )
        VALUES ( {{productId}}
               , {{orderId}}
               , {{quantity}}
               , {{datetime}}
               , {{type}} 
               )

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "datetime"   : string,
#    "depotId"    : number,
#    "orderId"    : number,
#    "products"   : [
#        {
#          "quantity"  : number,
#          "productId" : number
#        }
#    ]
#  }
#
PUT    /!order  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/move/order-to-depot",
            "fields" : ["depotId", "orderId"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/order-product",
            "fields" : ["orderId"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/!order-product",
            "expand" : "products",
            "fields" : ["status", "customerId", "depotId", "orderId", "productId", "quantity"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/order-last-change",
            "fields" : ["orderId", "datetime"]
        }
    ],
    "connections": [
        { "destination" : 1 },
        { "destination" : 2 },
        { "destination" : 3 },
        { "destination" : 4 },
        {
            "source"       : 2,
            "destination"  : 3
        },
        { "source" : 1 },
        { 
            "source" : 3,
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        }
     ]
}

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "datetime"   : string,
#    "depotId"    : number,
#    "products"   : [
#        {
#          "quantity"  : number,
#          "productId" : number
#        }
#    ],
#    "userId"     : number
#  }
#
POST   /!order  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/order",
            "fields" : ["datetime", "customerId", "userId"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/!order-product",
            "expand" : "products",
            "fields" : ["customerId", "depotId", "orderId", "productId", "quantity"]
        }
    ],
    "connections": [
        { "destination" : 1 },
        { "destination" : 2 },
        {
            "source"       : 1,
            "destination"  : 2,
            "transformers" : [
                {
                    "action": "rename",
                    "arguments": ["id", "orderId"]
                },
                {
                    "action": "include",
                    "arguments": ["orderId", "id", "products", "depotId", "customerId"]
                }
            ],
            "filters"      : []
        },
        { "source" : 1 },
        { 
            "source" : 2,
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        }
    ]
}

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "depotId"    : number,
#    "orderId"    : number,
#    "productId"  : number,
#    "quantity"   : number
#  }
#
POST   /!order-product  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/move/depot-to-order",
            "fields" : ["depotId", "orderId", "productId", "quantity"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/item",
            "fields" : ["rows", "customerId", "orderId", "productId", "quantity"]
        }
    ],
    "connections": [
        { "destination" : 1 },
        { "destination" : 2 },
        {
            "source"       : 1,
            "destination"  : 2,
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "equalTo",
                    "value"     : 1
                }
            ]
        },
        {
            "source"       : 1,
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "notEqualTo",
                    "value"     : 1
                }
            ],
            "transformers": [
                {
                    "action"    : "bind",
                    "arguments" : ["message", "Insufficient stock."]
                },
                {
                    "action"    : "bind",
                    "arguments" : ["status", false]
                },
                {
                    "action"    : "include",
                    "arguments" : ["message", "status"]
                }
 
             ]
        },
        { 
            "transformers": [
                {
                    "action"    : "include",
                    "arguments" : ["productId"]
                }
            ]
        },
        { "source" : 2 }
    ]
}

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "datetime"   : string,
#    "userId"     : number
#  }
#
POST   /order  <>

        INSERT INTO order_object 
            ( created
            , customer_id
            , last_change
            , status
            , user_id
            ) VALUES 
            ( {{datetime}}
            , {{customerId}}
            , {{datetime}}
            , 'placed'
            , {{userId}} 
            )

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "orderId"    : number,
#    "productId"  : number,
#    "quantity"   : number
#  }
#
POST   /item  <>

        INSERT INTO order_product (order_id, price, product_id, quantity, return)
        VALUES ( {{orderId}}
               , ( SELECT pp.price 
                   FROM customer c
                   JOIN product_price pp
                     ON pp.price_cat_id = c.price_cat_id 
                   WHERE c.id = {{customerId}}
                     AND pp.product_id = {{productId}} )
               , {{productId}}
               , {{quantity}} 
               , 0 )

PATCH  /order-last-change  ><

        UPDATE order_object
        SET last_change = {{datetime}}
        WHERE id = {{orderId}}

DELETE /order-product  --

        DELETE FROM order_product 
        WHERE order_id = {{orderId}}

# /////////////////////////////////////////////////////////////////////////////

# GET    /activity/customer/:id  >>
# 
#         ( id
#         , created
#         , description
#         , kind
#         , userId
#         , contactType 
#         , entityId
#         , user )
# 
#         select customer_activity.id
#              , customer_activity.created
#              , customer_activity.description
#              , customer_activity.kind
#              , customer_activity.user_id
#              , customer_activity.contact_type
#              , customer_activity.entity_id
#              , sdrp_user.name
#         from customer_activity
#           join sdrp_user 
#             on sdrp_user.id = customer_activity.user_id
#           where customer_activity.customer_id = {{:id}}
#         order by
#           customer_activity.id

GET    /contact/customer/:id  >>
                                                                              
        SELECT id
             , customer_id
             , kind
             , datum 
             , meta                                                            
        FROM customer_contact                                                
        WHERE customer_id = {{:id}}                                        
        GROUP BY                                                             
          id, kind                                                           
        ORDER BY 
          id 

GET    /complaint/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM complaint c
          JOIN customer k
            ON k.id = c.customer_id
        WHERE k.id = {{:id}}
  
GET    /complaint/customer/:id/limit/:limit/offset/:offset  >>

        ( id
        , created
        , customerId
        , description
        , title
        , kind
        , resolved
        , customerId
        , customer )

        SELECT c.id
             , c.created
             , c.customer_id
             , c.description
             , c.title
             , c.kind
             , c.resolved
             , k.id
             , k.name
        FROM complaint c
          JOIN customer k
            ON k.id = c.customer_id
        WHERE k.id = {{:id}}
        ORDER BY 
          c.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;

DRY      ( id
         , deleted 
         , description
         , name 
         , unitSize 
         , orderId
         , quantity 
         , price )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
              , op.order_id
              , op.quantity
              , op.price
         FROM product p
         JOIN order_product op
           ON op.product_id = p.id
         {{..}}
{
    GET /order-product/:id  >>

         WHERE op.order_id = {{:id}} ;
         ORDER BY 
           p.name ;
 
    POST /order-product  >>

         WHERE op.order_id 
           IN ({{orderIds}}) 
         ORDER BY 
           p.name
}

GET    /order/depot/:id/count  ->  ( count )

        SELECT COUNT(*) FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        LEFT JOIN area a
          ON a.id = c.area_id
        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )

GET    /order/status/:status/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        WHERE oo.customer_id = {{:id}}
          AND oo.status = {{:status}}
 
GET    /order/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        WHERE oo.customer_id = {{:id}}
 
GET    /order/count  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
 
DRY     ( id
        , created
        , customerId
        , lastChange
        , status
        , userId 
        , customerId 
        , customerName 
        , areaId 
        , depotId )

        SELECT oo.id
             , oo.created
             , oo.customer_id
             , oo.last_change
             , oo.status
             , oo.user_id
             , c.id
             , c.name
             , c.area_id
             , a.depot_id
        FROM order_object oo
          JOIN customer c
            ON c.id = oo.customer_id
          LEFT JOIN area a
            ON a.id = c.area_id
        {{..}}
{
    GET /order/:id  ->

        WHERE oo.id = {{:id}} ;

    GET /order/status/:status/customer/:id/limit/:limit/offset/:offset  >>

        WHERE oo.customer_id = {{:id}}
          AND oo.status = {{:status}}
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/customer/:id/limit/:limit/offset/:offset  >>

        WHERE oo.customer_id = {{:id}}
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/depot/:id/limit/:limit/offset/:offset  >>

        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/limit/:limit/offset/:offset  >>

        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} 
}

GET     /price-category  >>

         SELECT id, name
         FROM product_price_category
         ORDER BY id

GET     /weight-category  >>

         SELECT id, name
         FROM weight_category 
         ORDER BY id

GET     /customer/depot/:id/count  ->  ( count )

         SELECT COUNT(*) FROM customer c
         WHERE c.is_active = true
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} 
             )

DRY      ( id                                                                 
         , name                                                               
         , address                                                      
         , created                                                            
         , latitude                                                           
         , longitude                                                          
         , tin                                                                
         , phone                                                              
         , isActive                                                           
         , areaId                                                             
         , priceCatId                                                         
         , areaName                                                           
         , priceCategory )                                                                    

         SELECT c.id
              , c.name
              , c.address
              , c.created
              , c.latitude
              , c.longitude
              , c.tin
              , c.phone
              , c.is_active
              , c.area_id
              , c.price_cat_id
              , a.name
              , ppc.name
         FROM customer c
           JOIN area a
             ON a.id = c.area_id
           JOIN product_price_category ppc
             ON ppc.id = c.price_cat_id
         {{..}} 
{
    GET /customer/depot/:id/limit/:limit/offset/:offset  >>

         WHERE c.is_active = true
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} 
             )
         ORDER BY
           c.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
    GET /customer/:id  ->

         WHERE c.id = {{:id}}
}
  
GET     /stock/depot/:id/count  ->  ( count )  

         SELECT COUNT(*) 
         FROM depot_stock ds
         JOIN product p
           ON p.id = ds.product_id
         WHERE ds.depot_id = {{:id}}
 
GET     /stock/depot/:id/limit/:limit/offset/:offset  >>

         ( id
         , productId
         , productName
         , depotId
         , quantity )

         SELECT ds.id
              , ds.product_id
              , p.name
              , ds.depot_id
              , ds.quantity
         FROM depot_stock ds
         JOIN product p
           ON p.id = ds.product_id
         WHERE ds.depot_id = {{:id}}
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
POST    /product/search/count  ->  ( count )  

         SELECT COUNT(*) FROM product 
         WHERE lower(name) 
          LIKE lower({{q}})

GET     /product/count  ->  ( count )  

         SELECT COUNT(*) FROM product

POST    /product/search/price/limit/:limit/offset/:offset  >>

         ( id
         , deleted 
         , description
         , name 
         , unitSize 
         , assignedPrice )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
              , pp.price
         FROM product p
         LEFT JOIN product_price pp
           ON pp.product_id = p.id
          AND pp.price_cat_id = {{priceCatId}}
         WHERE lower(p.name) 
          LIKE lower({{q}})
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
DRY      ( id
         , deleted 
         , description
         , name 
         , unitSize )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
         FROM product p
         {{..}}
{
    POST /product/search/limit/:limit/offset/:offset  >>

         WHERE lower(p.name) 
          LIKE lower({{q}})
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;

    GET /product/limit/:limit/offset/:offset  >>

         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;

    GET /product/:id  ->

         WHERE p.id = {{:id}} 
}

DRY      ( id
         , price
         , priceCatId
         , productId )

         SELECT id
              , price
              , price_cat_id
              , product_id
         FROM product_price 
         {{..}}
{
    GET /product-price/product/:id  >>

         WHERE product_id = {{:id}} ;

    POST /product-price  >>

         WHERE product_id
            IN ({{productIds}})
         ORDER BY 
           price_cat_id
}

DRY      ( id
         , productId
         , productName
         , depotId
         , quantity )

         SELECT ds.id
              , ds.product_id
              , p.name
              , ds.depot_id
              , ds.quantity
         FROM depot_stock ds
         JOIN product p
           ON ds.product_id = p.id
         {{..}}
{
    GET /product-stock/product/:id  >>

         WHERE ds.product_id = {{:id}} ;

    POST /product-stock  >>

         AND ds.depot_id = {{depotId}}
         WHERE ds.product_id 
           IN ({{productIds}})
         ORDER BY 
           ds.id
}

DRY      ( id
         , categoryId
         , limit
         , productId )

         SELECT id
              , category_id
              , load_limit
              , product_id
         FROM product_limit 
         {{..}}
{
    GET /product-limit/product/:id  >>

         WHERE product_id = {{:id}} ;

    POST /product-limit  >>

         WHERE product_id 
           IN ({{productIds}})
         ORDER BY 
           id
}

POST    /authenticate  ->  (id, username, name, role, depotId)
    
         SELECT sphere_user.id
              , sphere_user.username
              , sphere_user.name
              , sphere_user.role
              , sphere_user.depot_id
         FROM sphere_user
         WHERE sphere_user.username = {{username}}
           AND sphere_user.password = crypt({{password}}, sphere_user.password)

