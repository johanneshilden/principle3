
POST /product-item                 <js>  node/product-item.js

POST /product-collection           <js>  node/product-collection.js

POST /order-collection             <js>  node/order-collection.js

POST /customer-order-collection    <js>  node/customer-order-collection.js

POST /order-item                   <js>  node/order-item.js

POST /order-create                 <js>  node/order-create.js

POST /order-update                 <js>  node/order-update.js

POST /complaint-collection         <js>  node/complaint-collection.js

POST /complaint-item               <js>  node/complaint-item.js

POST /tasks                        <js>  node/tasks.js

# /////////////////////////////////////////////////////////////////////////////

GET     /customer-inactive/:days/depot/:id  >>

         ( customerId
         , customerName
         , datetime )

         SELECT c.id
              , c.name
              , MAX(oo.created) 
         FROM customer c 
           JOIN order_object oo
             ON oo.customer_id = c.id 
         WHERE c.is_active = true 
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
         GROUP BY c.id 
           HAVING MAX(oo.created) < (CURRENT_DATE - INTERVAL '{{:days}} days') :: date

GET     /customer-followup/:days/depot/:id  >>

         ( customerId
         , customerName
         , datetime )

         SELECT c.id
              , c.name
              , MAX(ca.created) 
         FROM customer c 
           JOIN customer_activity ca 
             ON ca.customer_id = c.id 
         WHERE c.is_active = true 
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
         GROUP BY c.id 
           HAVING MAX(ca.created) < (CURRENT_DATE - INTERVAL '{{:days}} days') :: date

GET     /customer-visit-followup/:days/depot/:id  >>

         ( customerId
         , customerName
         , datetime )

         SELECT c.id
              , c.name
              , MAX(ca.created) 
         FROM customer c 
           JOIN customer_activity ca 
             ON ca.customer_id = c.id 
         WHERE c.is_active = true 
           AND ca.contact_type = 'visit'
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
          GROUP BY c.id 
           HAVING MAX(ca.created) < (CURRENT_DATE - INTERVAL '{{:days}} days') :: date

GET    /customer-order-followup/depot/:id  >>

        ( customerId 
        , customerName )

        SELECT customer.id 
             , customer.name
        FROM customer 
          JOIN order_object 
            ON order_object.customer_id = customer.id 
        WHERE customer.area_id IN 
          ( SELECT id 
            FROM area 
            WHERE depot_id = {{:id}} )
         GROUP BY customer.id 
          HAVING ((now() - MAX(order_object.created)) - (
            ( SELECT AVG(difference) 
              FROM ( SELECT created - lag(created) 
                       OVER (order by created) 
                         AS difference 
                     FROM order_object 
                     WHERE customer_id = customer.id) t))
            ) > interval '0'

GET    /activity-pending-callback/depot/:id  >>

        ( id
        , created
        , description
        , kind
        , userId
        , contactType 
        , entityId
        , customerId
        , customerName
        , user )

        SELECT ca.id
             , ca.created
             , ca.description
             , ca.kind
             , ca.user_id
             , ca.contact_type
             , ca.entity_id
             , ca.customer_id
             , customer.name
             , sdrp_user.name 
        FROM customer_activity ca 
          JOIN sdrp_user 
            ON sdrp_user.id = ca.user_id 
          JOIN customer
            ON customer.id = ca.customer_id
        WHERE kind = 'scheduled-call-back' 
          AND customer.area_id IN 
          ( SELECT id 
            FROM area 
            WHERE depot_id = {{:id}} )
        GROUP BY ca.id
            , sdrp_user.name 
            , customer.name
        HAVING ( SELECT COALESCE(MAX(created), '1970-01-01')
                 FROM customer_activity 
                 WHERE contact_type = 'proactive' 
                   AND customer_id = ca.customer_id 
                   AND kind <> 'scheduled-call-back'
               ) < ca.created 
          AND ca.created :: date = now() :: date

# /////////////////////////////////////////////////////////////////////////////

GET    /order-average/customer/:id  ->

        ( average )

        SELECT COALESCE(SUM(order_product.quantity * order_product.price :: float) / 
            ( SELECT COUNT(id) 
              FROM order_object 
              WHERE customer_id = {{:id}}
            ), 0) 
        FROM order_object 
          JOIN order_product 
            ON order_product.order_id = order_object.id 
        WHERE customer_id = {{:id}}

GET    /time-average/customer/:id  ->

        ( hours )

        SELECT COALESCE(EXTRACT(EPOCH FROM AVG(difference)/3600), 0) from 
            ( SELECT created - lag(created) 
                OVER (ORDER BY created) 
                  AS difference 
              FROM order_object 
              WHERE customer_id = {{:id}} 
            ) t

# /////////////////////////////////////////////////////////////////////////////
#
#  Update the status for an order and create an order log entry.
#
#  {
#    "datetime"       : string,
#    "status"         : string
#  }
#
PATCH  /!order/status/:id  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/order/status/:id",
            "fields" : [":id", "status", "datetime"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "order-activity",
            "fields" : ["datetime", "status", "return"]
        }
    ],
    "connections": [
        { "destination": 1 },
        { 
            "destination": 2,
            "transformers": [
                {
                    "action": "rename",
                    "arguments": [":id", "orderId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "filters": [
                {
                    "property": "status",
                    "predicate": "equalTo",
                    "value": true
                }
            ],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["status", "return"]
                }
            ]
        },
        { "source": 1 },
        { "source": 2 }
    ]
}

PATCH  /order/status/:id  ><

        UPDATE order_object 
        SET status = {{status}} 
          , last_change = {{datetime}}
        WHERE id = {{:id}}

# /////////////////////////////////////////////////////////////////////////////
#
#  Insert a customer contact and associated customer activity log entry.
#
#  {
#    "datetime"       : string,
#    "datum"          : string,
#    "kind"           : string,
#    "meta"           : string,
#    "type"           : string,
#    "userId"         : int
#  }
#
POST   /!contact/customer/:id  |>  
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/contact/customer/:id",
            "fields" : [":id", "kind", "meta", "datum"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/customer-activity",
            "fields" : ["datetime", "customerId", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        { "destination": 1 },
        {
            "destination": 2,
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["entityId", null]
                },
                {
                    "action": "bind",
                    "arguments": ["kind", "customer-contact-info"]
                },
                {
                    "action": "bind",
                    "arguments": ["description", ""]
                },
                {
                    "action": "rename",
                    "arguments": [":id", "customerId"]
                },
                {
                    "action": "rename",
                    "arguments": ["type", "contactType"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2
        },
        { "source": 1 }
    ]
}

POST   /contact/customer/:id  <>  

        INSERT INTO customer_contact 
          ( customer_id
          , kind
          , datum
          , meta
          ) values 
          ( {{:id}}
          , {{kind}}
          , {{datum}}
          , {{meta}} )

# /////////////////////////////////////////////////////////////////////////////
#
#  Create a quality complaint and customer activity log entry.
#
#  {
#    "datetime"    : string,
#    "description" : string,
#    "products"    : [
#       "batchNumber" : string,
#       "description" : string,
#       "expiryDate"  : string,
#       "produced"    : string,
#       "productId"   : int,
#       "quantity"    : int
#    ]
#    "title"       : string,
#    "type"        : string,
#    "userId"      : number
#  }
#
POST   /!quality-complaint/customer/:id  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/quality-complaint/customer/:id",
            "fields" : ["datetime", "title", "description"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/!!complaint-product",
            "expand" : "products",
            "fields" : ["batchNumber", "complaintId", "description", "productId", "quantity", "produced", "expiryDate"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/customer-activity",
            "fields" : ["datetime", "customerId", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        { "destination": 1 },
        {
            "destination": 2,
            "filters": [],
            "transformers": [
                {
                    "action": "include",
                    "arguments": ["products"]
                }
            ]
        },
        {
            "destination": 3,
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["kind", "quality-complaint"]
                },
                {
                    "action": "bind",
                    "arguments": ["description", ""]
                },
                {
                    "action": "rename",
                    "arguments": [":id", "customerId"]
                },
                {
                    "action": "rename",
                    "arguments": ["type", "contactType"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "complaintId"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 3,
            "filters": [],
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "entityId"]
                }
            ]
        },
        { "source": 1 },
        {
            "source": 2,
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        }
    ]
}

POST   /!!complaint-product  <>  

        INSERT INTO complaint_product
          ( batch_number
          , complaint_id
          , description
          , product_id
          , quantity
          , produced
          , expiry_date
          ) values 
          ( {{batchNumber}}
          , {{complaintId}}
          , {{description}}
          , {{productId}}
          , {{quantity}}
          , {{produced}}
          , {{expiryDate}} )

# /////////////////////////////////////////////////////////////////////////////
#
#  Create a service complaint and customer activity log entry.
#
#  {
#    "datetime"    : string,
#    "description" : string,
#    "title"       : string,
#    "type"        : string,
#    "userId"      : number
#  }
#
POST   /!service-complaint/customer/:id  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/service-complaint/customer/:id",
            "fields" : ["datetime", "title", "description"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/customer-activity",
            "fields" : ["datetime", "customerId", "description", "kind", "userId", "contactType", "entityId"]
        }
    ],
    "connections": [
        { "destination": 1 },
        {
            "destination": 2,
            "transformers": [
                {
                    "action": "bind",
                    "arguments": ["kind", "service-complaint"]
                },
                {
                    "action": "bind",
                    "arguments": ["description", ""]
                },
                {
                    "action": "rename",
                    "arguments": [":id", "customerId"]
                },
                {
                    "action": "rename",
                    "arguments": ["type", "contactType"]
                }
            ]
        },
        {
            "source": 1,
            "destination": 2,
            "transformers": [
                {
                    "action": "rename",
                    "arguments": ["id", "entityId"]
                }
            ]
        },
        { "source": 1 }
    ]
}

POST   /service-complaint/customer/:id  <>

        INSERT INTO complaint (created, customer_id, title, description, kind)
          VALUES ( {{datetime}}
                 , {{:id}}
                 , {{title}}
                 , {{description}}
                 , 'service' )

POST   /quality-complaint/customer/:id  <>

        INSERT INTO complaint (created, customer_id, title, description, kind)
          VALUES ( {{datetime}}
                 , {{:id}}
                 , {{title}}
                 , {{description}}
                 , 'quality' )

# /////////////////////////////////////////////////////////////////////////////
#
#  Move all stock from an order back to a depot.
#
#  {
#    "depotId"   : number,
#    "orderId"   : number
#  }
#
PATCH  /stock/move/order-to-depot ><

        WITH update AS
          ( UPDATE depot_stock ds 
            SET quantity = ds.quantity + c.quantity 
            FROM ( SELECT product_id
                        , quantity 
                   FROM order_stock 
                   WHERE order_id = {{orderId}}
                 ) c 
            WHERE c.product_id = ds.product_id 
              AND ds.depot_id  = {{depotId}}
          ) DELETE from order_stock 
            WHERE order_id = {{orderId}}

# /////////////////////////////////////////////////////////////////////////////
#
#  Move stock from a depot to an order.
#
#  {
#    "depotId"   : number,
#    "orderId"   : number,
#    "productId" : number,
#    "quantity"  : number
#  }
#
PATCH  /stock/move/depot-to-order  ><

        WITH update AS
          ( UPDATE depot_stock
            SET quantity = quantity - {{quantity}}
            WHERE product_id = {{productId}}
              AND depot_id   = {{depotId}}
              AND quantity  >= {{quantity}}
            RETURNING {{productId}}, {{orderId}} :: integer, {{quantity}}
          ) INSERT INTO order_stock
            ( product_id
            , order_id
            , quantity )
            ( SELECT * FROM update )

# /////////////////////////////////////////////////////////////////////////////
#
#  Log a depot stock transaction.
#
#  {
#    "datetime"   : string,
#    "depotId"    : number,
#    "productId"  : number,
#    "quantity"   : number,
#    "type"       : string
#  }
#
POST   /stock-transaction/depot  ><

        INSERT INTO depot_stock_transaction
            ( product_id, depot_id, quantity, time, transaction_type )
        VALUES ( {{productId}}
               , {{depotId}}
               , {{quantity}}
               , {{datetime}}
               , {{type}} 
               )

# /////////////////////////////////////////////////////////////////////////////
#
#  Log an order stock transaction.
#
#  {
#    "datetime"   : string,
#    "orderId"    : number,
#    "productId"  : number,
#    "quantity"   : number,
#    "type"       : string
#  }
#
POST   /stock-transaction/order  ><

        INSERT INTO order_stock_transaction
            ( product_id, order_id, quantity, time, transaction_type )
        VALUES ( {{productId}}
               , {{orderId}}
               , {{quantity}}
               , {{datetime}}
               , {{type}} 
               )

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "datetime"   : string,
#    "depotId"    : number,
#    "orderId"    : number,
#    "products"   : [
#        {
#          "quantity"  : number,
#          "productId" : number
#        }
#    ]
#  }
#
PUT    /!order  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/move/order-to-depot",
            "fields" : ["depotId", "orderId"]
        },
        {
            "id"     : 2,
            "method" : "DELETE",
            "uri"    : "/order-product",
            "fields" : ["orderId"]
        },
        {
            "id"     : 3,
            "method" : "POST",
            "uri"    : "/!order-product",
            "expand" : "products",
            "fields" : ["status", "customerId", "depotId", "orderId", "productId", "quantity"]
        },
        {
            "id"     : 4,
            "method" : "PATCH",
            "uri"    : "/order-last-change",
            "fields" : ["orderId", "datetime"]
        }
    ],
    "connections": [
        { "destination" : 1 },
        { "destination" : 2 },
        { "destination" : 3 },
        { "destination" : 4 },
        {
            "source"       : 2,
            "destination"  : 3
        },
        { "source" : 1 },
        { 
            "source" : 3,
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        }
     ]
}

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "datetime"   : string,
#    "depotId"    : number,
#    "products"   : [
#        {
#          "quantity"  : number,
#          "productId" : number
#        }
#    ],
#    "userId"     : number
#  }
#
POST   /!order  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "POST",
            "uri"    : "/order",
            "fields" : ["datetime", "customerId", "userId"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/!order-product",
            "expand" : "products",
            "fields" : ["customerId", "depotId", "orderId", "productId", "quantity"]
        }
    ],
    "connections": [
        { "destination" : 1 },
        { "destination" : 2 },
        {
            "source"       : 1,
            "destination"  : 2,
            "transformers" : [
                {
                    "action": "rename",
                    "arguments": ["id", "orderId"]
                },
                {
                    "action": "include",
                    "arguments": ["orderId", "id", "products", "depotId", "customerId"]
                }
            ],
            "filters"      : []
        },
        { "source" : 1 },
        { 
            "source" : 2,
            "transformers": [
                {
                    "action": "aggregate",
                    "arguments": ["products"]
                }
            ]
        }
    ]
}

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "depotId"    : number,
#    "orderId"    : number,
#    "productId"  : number,
#    "quantity"   : number
#  }
#
POST   /!order-product  |>
{
    "processors": [
        {
            "id"     : 1,
            "method" : "PATCH",
            "uri"    : "/stock/move/depot-to-order",
            "fields" : ["depotId", "orderId", "productId", "quantity"]
        },
        {
            "id"     : 2,
            "method" : "POST",
            "uri"    : "/item",
            "fields" : ["rows", "customerId", "orderId", "productId", "quantity"]
        }
    ],
    "connections": [
        { "destination" : 1 },
        { "destination" : 2 },
        {
            "source"       : 1,
            "destination"  : 2,
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "equalTo",
                    "value"     : 1
                }
            ]
        },
        {
            "source"       : 1,
            "filters"      : [
                {
                    "property"  : "rows",
                    "predicate" : "notEqualTo",
                    "value"     : 1
                }
            ],
            "transformers": [
                {
                    "action"    : "bind",
                    "arguments" : ["message", "Insufficient stock."]
                },
                {
                    "action"    : "bind",
                    "arguments" : ["status", false]
                },
                {
                    "action"    : "include",
                    "arguments" : ["message", "status"]
                }
 
             ]
        },
        { 
            "transformers": [
                {
                    "action"    : "include",
                    "arguments" : ["productId"]
                }
            ]
        },
        { "source" : 2 }
    ]
}

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "datetime"   : string,
#    "userId"     : number
#  }
#
POST   /order  <>

        INSERT INTO order_object 
            ( created
            , customer_id
            , last_change
            , status
            , user_id
            ) VALUES 
            ( {{datetime}}
            , {{customerId}}
            , {{datetime}}
            , 'placed'
            , {{userId}} 
            )

# /////////////////////////////////////////////////////////////////////////////
#
#  {
#    "customerId" : number,
#    "orderId"    : number,
#    "productId"  : number,
#    "quantity"   : number
#  }
#
POST   /item  <>

        INSERT INTO order_product (order_id, price, product_id, quantity, return)
        VALUES ( {{orderId}}
               , ( SELECT pp.price 
                   FROM customer c
                   JOIN product_price pp
                     ON pp.price_cat_id = c.price_cat_id 
                   WHERE c.id = {{customerId}}
                     AND pp.product_id = {{productId}} )
               , {{productId}}
               , {{quantity}} 
               , 0 )

PATCH  /order-last-change  ><

        UPDATE order_object
        SET last_change = {{datetime}}
        WHERE id = {{orderId}}

DELETE /order-product  --

        DELETE FROM order_product 
        WHERE order_id = {{orderId}}

POST   /order-weight/:id  <>

        INSERT INTO order_weight ( order_id, category_id, weight ) 
            ( SELECT {{:id}} 
                   , id 
                   , ( SELECT COALESCE(SUM(op.quantity / pl.load_limit :: float), 0) 
                       FROM order_product op
                         JOIN product_limit pl
                           ON pl.product_id = op.product_id 
                       WHERE op.order_id = {{:id}} 
                         AND category_id = weight_category.id
                     ) FROM weight_category
            )

DELETE /order-weight/:id  --

        DELETE FROM order_weight
        WHERE order_id = {{:id}}
 
POST   /customer-activity  <>

        INSERT INTO customer_activity ( created, customer_id, description, kind, user_id, contact_type, entity_id )
            VALUES ( {{datetime}}
                   , {{customerId}}
                   , {{description}}
                   , {{kind}}
                   , {{userId}} 
                   , {{contactType}} 
                   , {{entityId}} )

POST   /order-activity  <>                                       

        INSERT INTO order_activity ( created, order_id, status )
            VALUES ( {{datetime}}
                   , {{orderId}}
                   , {{status}} )

POST   /customer-pending  <>                                       
                                                                              
        INSERT INTO customer_pending
          ( name                                                               
          , address                                                     
          , phone                                                              
          , created
          , user_id
          ) values                                                             
          ( {{name}}                                                         
          , {{address}}                                                
          , {{phone}}                                                        
          , {{datetime}}
          , {{userId}} )

# /////////////////////////////////////////////////////////////////////////////

POST   /complaint-product  >>

        ( id
        , batchNumber
        , complaintId
        , description
        , productId
        , quantity
        , produced
        , expiryDate
        , name )

        SELECT cp.id 
             , cp.batch_number 
             , cp.complaint_id 
             , cp.description 
             , cp.product_id 
             , cp.quantity 
             , cp.produced 
             , cp.expiry_date
             , p.name
        FROM complaint_product cp
          JOIN product p
            ON p.id = cp.product_id
        WHERE cp.complaint_id IN ({{complaintIds}})
        ORDER BY 
          p.name

GET    /order-activity/:id  >>

        SELECT id
             , created
             , order_id
             , status
        FROM order_activity
        WHERE order_id = {{:id}}
        ORDER by 
          created 

GET    /customer-activity/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM customer_activity ca
          JOIN sphere_user u
            ON u.id = ca.user_id
          WHERE ca.customer_id = {{:id}}
  
GET    /customer-activity/:id/limit/:limit/offset/:offset  >>

        ( id
        , created
        , description
        , kind
        , userId
        , contactType 
        , entityId
        , user )

        SELECT ca.id
             , ca.created
             , ca.description
             , ca.kind
             , ca.user_id
             , ca.contact_type
             , ca.entity_id
             , u.name
        FROM customer_activity ca
          JOIN sphere_user u
            ON u.id = ca.user_id
          WHERE ca.customer_id = {{:id}}
        ORDER BY
          ca.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;

GET    /contact/customer/:id  >>
                                                                              
        SELECT id
             , customer_id
             , kind
             , datum 
             , meta                                                            
        FROM customer_contact                                                
        WHERE customer_id = {{:id}}                                        
        GROUP BY                                                             
          id, kind                                                           
        ORDER BY 
          id 

GET    /complaint/unresolved/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM complaint c
          JOIN customer k
            ON k.id = c.customer_id
        WHERE k.id = {{:id}}
          AND resolved IS NULL
 
GET    /complaint/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM complaint c
          JOIN customer k
            ON k.id = c.customer_id
        WHERE k.id = {{:id}}
  
DRY     ( id
        , created
        , customerId
        , description
        , title
        , kind
        , resolved
        , customerId
        , customer )

        SELECT c.id
             , c.created
             , c.customer_id
             , c.description
             , c.title
             , c.kind
             , c.resolved
             , k.id
             , k.name
        FROM complaint c
          JOIN customer k
            ON k.id = c.customer_id
        {{..}}
{
    GET /complaint/unresolved/customer/:id/limit/:limit/offset/:offset  >>

        WHERE k.id = {{:id}}
          AND resolved IS NULL
        ORDER BY 
          c.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;

    GET /complaint/customer/:id/limit/:limit/offset/:offset  >>

        WHERE k.id = {{:id}}
        ORDER BY 
          c.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;

    GET /complaint/:id  ->

        WHERE c.id = {{:id}}
}

PATCH  /complaint/resolve/:id  --  

        UPDATE complaint 
        SET resolved = {{datetime}} 
          WHERE id = {{:id}}

DRY      ( id
         , deleted 
         , description
         , name 
         , unitSize 
         , orderId
         , quantity 
         , price )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
              , op.order_id
              , op.quantity
              , op.price
         FROM product p
         JOIN order_product op
           ON op.product_id = p.id
         {{..}}
{
    GET /order-product/:id  >>

         WHERE op.order_id = {{:id}} ;
         ORDER BY 
           p.name ;
 
    POST /order-product  >>

         WHERE op.order_id 
           IN ({{orderIds}}) 
         ORDER BY 
           p.name
}

GET    /order/depot/:id/count  ->  ( count )

        SELECT COUNT(*) FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        LEFT JOIN area a
          ON a.id = c.area_id
        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )

GET    /order/status/:status/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        WHERE oo.customer_id = {{:id}}
          AND oo.status = {{:status}}
 
GET    /order/customer/:id/count  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
        WHERE oo.customer_id = {{:id}}
 
GET    /order/count  ->  ( count )

        SELECT COUNT(*) 
        FROM order_object oo 
        JOIN customer c 
          ON c.id = oo.customer_id
 
DRY     ( id
        , created
        , customerId
        , lastChange
        , status
        , userId 
        , customerId 
        , customerName 
        , areaId 
        , depotId )

        SELECT oo.id
             , oo.created
             , oo.customer_id
             , oo.last_change
             , oo.status
             , oo.user_id
             , c.id
             , c.name
             , c.area_id
             , a.depot_id
        FROM order_object oo
          JOIN customer c
            ON c.id = oo.customer_id
          LEFT JOIN area a
            ON a.id = c.area_id
        {{..}}
{
    GET /order/:id  ->

        WHERE oo.id = {{:id}} ;

    GET /order/depot/:id/status/:status  >>

        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
          AND oo.status = {{:status}}
        ORDER BY 
          oo.created DESC ;
 
    GET /order/status/:status/customer/:id/limit/:limit/offset/:offset  >>

        WHERE oo.customer_id = {{:id}}
          AND oo.status = {{:status}}
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/customer/:id/limit/:limit/offset/:offset  >>

        WHERE oo.customer_id = {{:id}}
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/depot/:id/limit/:limit/offset/:offset  >>

        WHERE c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} )
        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} ;
 
    GET /order/limit/:limit/offset/:offset  >>

        ORDER BY 
          oo.created DESC
        LIMIT {{:limit}}
        OFFSET {{:offset}} 
}

GET     /price-category  >>

         SELECT id, name
         FROM product_price_category
         ORDER BY id

GET     /weight-category  >>

         SELECT id, name
         FROM weight_category 
         ORDER BY id

POST    /customer/search/count  ->  ( count )  

         SELECT COUNT(*) FROM customer
         WHERE lower(name) 
          LIKE lower({{q}})

GET     /customer/depot/:id/count  ->  ( count )

         SELECT COUNT(*) FROM customer c
         WHERE c.is_active = true
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} 
             )

DRY      ( id                                                                 
         , name                                                               
         , address                                                      
         , created                                                            
         , latitude                                                           
         , longitude                                                          
         , tin                                                                
         , phone                                                              
         , isActive                                                           
         , areaId                                                             
         , priceCatId                                                         
         , areaName                                                           
         , priceCategory )                                                                    

         SELECT c.id
              , c.name
              , c.address
              , c.created
              , c.latitude
              , c.longitude
              , c.tin
              , c.phone
              , c.is_active
              , c.area_id
              , c.price_cat_id
              , a.name
              , ppc.name
         FROM customer c
           JOIN area a
             ON a.id = c.area_id
           JOIN product_price_category ppc
             ON ppc.id = c.price_cat_id
         {{..}} 
{
    POST /customer/search/limit/:limit/offset/:offset  >>

         WHERE lower(c.name) 
          LIKE lower({{q}})
         ORDER BY
           c.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
    GET /customer/depot/:id/limit/:limit/offset/:offset  >>

         WHERE c.is_active = true
           AND c.area_id IN 
             ( SELECT id 
               FROM area 
               WHERE depot_id = {{:id}} 
             )
         ORDER BY
           c.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
    GET /customer/:id  ->

         WHERE c.id = {{:id}}
}
  
GET     /stock/depot/:id/count  ->  ( count )  

         SELECT COUNT(*) 
         FROM depot_stock ds
         JOIN product p
           ON p.id = ds.product_id
         WHERE ds.depot_id = {{:id}}
 
GET     /stock/depot/:id/limit/:limit/offset/:offset  >>

         ( id
         , productId
         , productName
         , depotId
         , quantity )

         SELECT ds.id
              , ds.product_id
              , p.name
              , ds.depot_id
              , ds.quantity
         FROM depot_stock ds
         JOIN product p
           ON p.id = ds.product_id
         WHERE ds.depot_id = {{:id}}
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
POST    /product/search/count  ->  ( count )  

         SELECT COUNT(*) FROM product 
         WHERE lower(name) 
          LIKE lower({{q}})

GET     /product/count  ->  ( count )  

         SELECT COUNT(*) FROM product

POST    /product/search/price/limit/:limit/offset/:offset  >>

         ( id
         , deleted 
         , description
         , name 
         , unitSize 
         , assignedPrice )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
              , pp.price
         FROM product p
         LEFT JOIN product_price pp
           ON pp.product_id = p.id
          AND pp.price_cat_id = {{priceCatId}}
         WHERE lower(p.name) 
          LIKE lower({{q}})
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;
 
DRY      ( id
         , deleted 
         , description
         , name 
         , unitSize )

         SELECT p.id
              , p.deleted
              , p.description
              , p.name
              , p.unit_size 
         FROM product p
         {{..}}
{
    POST /product/search/limit/:limit/offset/:offset  >>

         WHERE lower(p.name) 
          LIKE lower({{q}})
         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;

    GET /product/limit/:limit/offset/:offset  >>

         ORDER BY 
           p.name
         LIMIT {{:limit}}
         OFFSET {{:offset}} ;

    GET /product/:id  ->

         WHERE p.id = {{:id}} 
}

DRY      ( id
         , price
         , priceCatId
         , productId )

         SELECT id
              , price
              , price_cat_id
              , product_id
         FROM product_price 
         {{..}}
{
    GET /product-price/product/:id  >>

         WHERE product_id = {{:id}} ;

    POST /product-price  >>

         WHERE product_id
            IN ({{productIds}})
         ORDER BY 
           price_cat_id
}

DRY      ( id
         , productId
         , productName
         , depotId
         , quantity )

         SELECT ds.id
              , ds.product_id
              , p.name
              , ds.depot_id
              , ds.quantity
         FROM depot_stock ds
         JOIN product p
           ON ds.product_id = p.id
         {{..}}
{
    GET /product-stock/product/:id  >>

         WHERE ds.product_id = {{:id}} ;

    POST /product-stock  >>

         AND ds.depot_id = {{depotId}}
         WHERE ds.product_id 
           IN ({{productIds}})
         ORDER BY 
           ds.id
}

DRY      ( id
         , categoryId
         , limit
         , productId )

         SELECT id
              , category_id
              , load_limit
              , product_id
         FROM product_limit 
         {{..}}
{
    GET /product-limit/product/:id  >>

         WHERE product_id = {{:id}} ;

    POST /product-limit  >>

         WHERE product_id 
           IN ({{productIds}})
         ORDER BY 
           id
}

POST    /authenticate  ->  (id, username, name, role, depotId)
    
         SELECT sphere_user.id
              , sphere_user.username
              , sphere_user.name
              , sphere_user.role
              , sphere_user.depot_id
         FROM sphere_user
         WHERE sphere_user.username = {{username}}
           AND sphere_user.password = crypt({{password}}, sphere_user.password)

